<!-- 单文件上传form表单样式 -->
<form name="testform" action="<%=path%>/upload" method="post" enctype="multipart/form-data">
    
	<!-- 本次上传任务uuid，按如下规则生成。一次完整上传任务，断点续传每次提交的uuid必须相同 --> 
	<input type="text" name="uuid" value="h2resb68-7rbi-aca4-p6wx-2oocuqz2nm3v" />
	
	<!-- 待上传的文件 -->
	<!-- md5 计算出的文件MD5 -->
	<!-- offset 该文件读取偏移 -->
	<!-- total 该文件总字节数 -->
	<input type="file" name="file" filename="nox_setup_v7.0.3.8_full.exe" />
	<input type="text" name="offset" value="0" />
	<input type="text" name="md5" value="c3b6ad64d46b6974d8e720785e9f177f" />
	<input type="text" name="total" value="5456454" />
	
    <input type="submit" value="提交" />
</form>

--4cdb2ae6a249aca16578da6484d6012836d0a2d1198e15ec3653aa9488bf
Content-Disposition: form-data; name=\"uuid\"
9uas4ljy-ttb3-ttb3-vx93-vx93lbnod0za
--4cdb2ae6a249aca16578da6484d6012836d0a2d1198e15ec3653aa9488bf
Content-Disposition: form-data; name=\"50c23496389c3b2b9e67d202ffb48d03.offset\"

0
--4cdb2ae6a249aca16578da6484d6012836d0a2d1198e15ec3653aa9488bf
Content-Disposition: form-data; name=\"50c23496389c3b2b9e67d202ffb48d03.total\"

75526055
--4cdb2ae6a249aca16578da6484d6012836d0a2d1198e15ec3653aa948

form-data; name=\"c5459c3b484665d272116b2a53d2c922\"; filename=\"nox_setup_v7.0.3.8_full.exe\", "Content-Type": "application/octet-stream"

<!-- 上传错误码 -->
<!-- ErrOk                  = ErrorMsg{0, "Ok"}                                    //上传完成，并且成功
<!-- ErrSegOk               = ErrorMsg{1, "upload file segment succ"}              //上传成功(分段续传)                         --需要继续分段上传剩余数据
<!-- ErrFileMd5             = ErrorMsg{2, "upload file over, but md5 failed"}      //上传完成，校验出错                         --上传失败
<!-- ErrRepeat              = ErrorMsg{3, "Repeat upload same file"}               //文件重复上传                               --别人上传了
<!-- ErrCheckReUpload       = ErrorMsg{4, "check and re-upload file"}              //文件校正重传                               --需要继续 客户端拿到返回校正数据继续上传
<!-- ErrParamsUUID          = ErrorMsg{5, "upload param error uuid"}               //上传参数错误 uuid                          --上传错误
<!-- ErrParamsMD5           = ErrorMsg{6, "upload param error md5"}                //上传参数错误 文件md5                       --上传错误
<!-- ErrParamsOffset        = ErrorMsg{7, "upload param error offset"}             //上传参数错误 文件已读大小偏移数           --上传错误
<!-- ErrParamsTotalLimit    = ErrorMsg{8, "upload param error total size"}         //上传参数错误 单个上传文件字节数           --上传错误
<!-- ErrParamsSegSizeLimit  = ErrorMsg{9, "upload per-segment size limited"}       //上传参数错误 单次上传字节数限制           --上传错误
<!-- ErrParamsAllTotalLimit = ErrorMsg{10, "upload all total szie limited"}        //上传参数错误 单次上传文件总大小           --上传错误
<!-- ErrParsePartData       = ErrorMsg{11, "parse multipart form-data err"}        //解析multipart form-data数据错误            --上传失败
<!-- ErrParseFormFile       = ErrorMsg{12, "parse multipart form-file err"}        //解析multipart form-file文件错误            --上传失败
<!-- ErrParamsSegSizeZero   = ErrorMsg{13, "upload multipart form-data size zero"} //上传form-data数据字节大小为0               --上传失败
<!-- ErrMultiFileNotSupport = ErrorMsg{14, "upload multifiles not supported"}      //MultiFile为false时，一次只能上传一个文件


<!-- 请求返回json数据 Resp -->
type Resp struct {
 	Uuid    string      `json:"uuid,omitempty"`
 	ErrCode int         `json:"code,omitempty"`
 	ErrMsg  string      `json:"errmsg,omitempty"`
 	Data    []Result    `json:"data,omitempty"` <!-- Result数组，对应一次上传多个文件的返回结果，比如一次上传5个文件，那么就有5条 Result -->
}

<!-- 请求返回json数据 Result -->
type Result struct {
	Uuid    string `json:"uuid,omitempty"`
	File    string `json:"file,omitempty"`
	Md5     string `json:"md5,omitempty"`
	Now     int64  `json:"now,omitempty"`      <!-- 当前文件上传进度，即文件偏移offset，下次需要从这个offset读取文件继续上传 -->
	Total   int64  `json:"total,omitempty"`    <!-- 当前文件总的字节数 -->
	Expired int64  `json:"expired,omitempty"`  <!-- 未决的上传过期时间，如果不继续上传，超过这个时间服务器就会清理，客户端需要重新上传 -->
	ErrCode int    `json:"code,omitempty"`
	ErrMsg  string `json:"errmsg,omitempty"`
	Message string `json:"message,omitempty"`
}



<!--  启动客户端，读取临时文件(有的话)，先上传未传完的文件，再上传其他文件 -->


<!--  先上传未传完的文件 ，定位读取文件偏移(上传进度)，从断点处继续上传，如果 Expired 值已经过期，该临时文件无效，从头开始上传 -->

<!--  再上传其他文件 -->

<!-- 请求返回的 Resp -->
resp := Resp{}
err = json.Unmarshal(body, &resp)
<!-- 遍历 Resp 中的Result数组 针对每个文件上传结果处理 -->
for _, result := range resp.Data {
	switch result.ErrCode {
	case ErrParseFormFile.ErrCode:
	case ErrParamsSegSizeLimit.ErrCode:
	case ErrParamsSegSizeZero.ErrCode:
	case ErrParamsTotalLimit.ErrCode:
	case ErrParamsOffset.ErrCode:
	case ErrParamsMD5.ErrCode:
	case ErrParamsAllTotalLimit.ErrCode:
	<!-- 文件重复上传，别人正在上传中 -->
	case ErrRepeat.ErrCode:
		logs.LogError("*** uuid:%v %v[%v] %v => %v", result.Uuid, result.Md5, result.File, result.ErrMsg, result.Message)
		break
		
		<!-- 上传成功(分段续传)，继续读取文件剩余字节继续上传 -->
	case ErrSegOk.ErrCode:
		logs.LogError("*** uuid:%v %v[%v] %v => %v", result.Uuid, result.Md5, result.File, result.ErrMsg, result.Message)
		if result.Now <= 0 {
			break
		}
		<!-- 上传进度写入临时文件 -->
		fd, err := os.OpenFile(tmp_dir+result.Md5+".tmp", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0777)
		if err != nil {
			logs.LogError("%v", err.Error())
			return
		}
		b, err := json.Marshal(&result)
		if err != nil {
			logs.LogFatal("%v", err.Error())
			break
		}
		_, err = fd.Write(b)
		if err != nil {
			logs.LogFatal("%v", err.Error())
			break
		}
		err = fd.Close()
		if err != nil {
			logs.LogFatal("%v", err.Error())
		}
	
	<!-- 文件校正需要重传 -->
	case ErrCheckReUpload.ErrCode:	
		if results == nil {
			results = map[string]Result{}
		}
		results[result.Md5] = result
		logs.LogError("*** uuid:%v %v[%v] %v => %v", result.Uuid, result.Md5, result.File, result.ErrMsg, result.Message)
		break
	<!-- 上传完成，校验出错 -->
	case ErrFileMd5.ErrCode:
	<!-- 上传完成，并且成功 -->
	case ErrOk.ErrCode:
		delete(results, result.Md5)
		offset[result.Md5] = total[result.Md5]
		removeMd5File(&MD5, result.Md5)
		<!-- 上传完成，删除临时文件 -->
		os.Remove(tmp_dir + result.Md5 + ".tmp")
		logs.LogTrace("*** uuid:%v %v[%v] %v => %v", result.Uuid, result.Md5, result.File, result.ErrMsg, result.Message)
	}
}
<!-- Resp错误处理，上传失败 -->
switch resp.ErrCode {
case ErrParamsUUID.ErrCode:
case ErrParsePartData.ErrCode:
	logs.LogError("*** uuid:%v %v", resp.Uuid, resp.ErrMsg)
}
}
res.Body.Close()




switch resp.ErrCode {
				case ErrParamsUUID.ErrCode:
					fallthrough
				case ErrParsePartData.ErrCode:
					// 需要继续重试
					logs.LogError("--- uuid:%v %v", resp.Uuid, resp.ErrMsg)
					continue
				}
				// 读取每个文件上传状态数据
				for _, result := range resp.Data {
					switch result.ErrCode {
					case ErrParseFormFile.ErrCode:
						fallthrough
					case ErrParamsSegSizeLimit.ErrCode:
						fallthrough
					case ErrParamsSegSizeZero.ErrCode:
						fallthrough
					case ErrParamsTotalLimit.ErrCode:
						fallthrough
					case ErrParamsOffset.ErrCode:
						fallthrough
					case ErrParamsMD5.ErrCode:
						fallthrough
					case ErrParamsAllTotalLimit.ErrCode:
						fallthrough
					case ErrRepeat.ErrCode:
						logs.LogError("--- uuid:%v %v[%v] %v => %v", result.Uuid, result.Md5, result.File, result.ErrMsg, result.Message)
					// 上传成功(分段续传)，继续读取文件剩余字节继续上传
					case ErrSegOk.ErrCode:
						logs.LogError("--- uuid:%v %v[%v] %v => %v", result.Uuid, result.Md5, result.File, result.ErrMsg, result.Message)
						if result.Now <= 0 {
							break
						}
						// 上传进度写入临时文件
						fd, err := os.OpenFile(tmp_dir+result.Md5+".tmp", os.O_WRONLY|os.O_CREATE|os.O_TRUNC, 0777)
						if err != nil {
							logs.LogError(err.Error())
							break
						}
						b, err := json.Marshal(&result)
						if err != nil {
							logs.LogFatal(err.Error())
							break
						}
						_, err = fd.Write(b)
						if err != nil {
							logs.LogFatal(err.Error())
							break
						}
						err = fd.Close()
						if err != nil {
							logs.LogFatal(err.Error())
						}
						// 更新文件读取偏移
						offset[result.Md5] = result.Now
					case ErrCheckReUpload.ErrCode:
						// 校正需要重传
						offset[result.Md5] = result.Now
						logs.LogError("--- uuid:%v %v[%v] %v => %v", result.Uuid, result.Md5, result.File, result.ErrMsg, result.Message)
					case ErrFileMd5.ErrCode:
						// 上传失败了
						fallthrough
					case ErrOk.ErrCode:
						offset[result.Md5] = total[result.Md5]
						removeMd5File(&MD5, result.Md5)
						// 上传完成，删除临时文件
						os.Remove(tmp_dir + result.Md5 + ".tmp")
						logs.LogTrace("--- uuid:%v %v[%v] %v => %v", result.Uuid, result.Md5, result.File, result.ErrMsg, result.Message)
					}
				}