// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.7.0
// source: gate.http/gate.http.proto

package pb_httpgate

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommonResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string             `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id     int32              `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Server *CommonResp_Server `protobuf:"bytes,3,opt,name=server,proto3" json:"server,omitempty"`
	Pid    int32              `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
}

func (x *CommonResp) Reset() {
	*x = CommonResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gate_http_gate_http_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResp) ProtoMessage() {}

func (x *CommonResp) ProtoReflect() protoreflect.Message {
	mi := &file_gate_http_gate_http_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResp.ProtoReflect.Descriptor instead.
func (*CommonResp) Descriptor() ([]byte, []int) {
	return file_gate_http_gate_http_proto_rawDescGZIP(), []int{0}
}

func (x *CommonResp) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CommonResp) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *CommonResp) GetServer() *CommonResp_Server {
	if x != nil {
		return x.Server
	}
	return nil
}

func (x *CommonResp) GetPid() int32 {
	if x != nil {
		return x.Pid
	}
	return 0
}

type RouterReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Md5 string `protobuf:"bytes,1,opt,name=md5,proto3" json:"md5,omitempty"`
}

func (x *RouterReq) Reset() {
	*x = RouterReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gate_http_gate_http_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterReq) ProtoMessage() {}

func (x *RouterReq) ProtoReflect() protoreflect.Message {
	mi := &file_gate_http_gate_http_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterReq.ProtoReflect.Descriptor instead.
func (*RouterReq) Descriptor() ([]byte, []int) {
	return file_gate_http_gate_http_proto_rawDescGZIP(), []int{1}
}

func (x *RouterReq) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

type RouterResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resp       *CommonResp `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
	Md5        string      `protobuf:"bytes,2,opt,name=md5,proto3" json:"md5,omitempty"`
	Dns        string      `protobuf:"bytes,3,opt,name=dns,proto3" json:"dns,omitempty"`
	NumOfLoads int32       `protobuf:"varint,4,opt,name=NumOfLoads,proto3" json:"NumOfLoads,omitempty"`
	ErrCode    int32       `protobuf:"varint,5,opt,name=errCode,proto3" json:"errCode,omitempty"`
	ErrMsg     string      `protobuf:"bytes,6,opt,name=errMsg,proto3" json:"errMsg,omitempty"`
}

func (x *RouterResp) Reset() {
	*x = RouterResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gate_http_gate_http_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RouterResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RouterResp) ProtoMessage() {}

func (x *RouterResp) ProtoReflect() protoreflect.Message {
	mi := &file_gate_http_gate_http_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RouterResp.ProtoReflect.Descriptor instead.
func (*RouterResp) Descriptor() ([]byte, []int) {
	return file_gate_http_gate_http_proto_rawDescGZIP(), []int{2}
}

func (x *RouterResp) GetResp() *CommonResp {
	if x != nil {
		return x.Resp
	}
	return nil
}

func (x *RouterResp) GetMd5() string {
	if x != nil {
		return x.Md5
	}
	return ""
}

func (x *RouterResp) GetDns() string {
	if x != nil {
		return x.Dns
	}
	return ""
}

func (x *RouterResp) GetNumOfLoads() int32 {
	if x != nil {
		return x.NumOfLoads
	}
	return 0
}

func (x *RouterResp) GetErrCode() int32 {
	if x != nil {
		return x.ErrCode
	}
	return 0
}

func (x *RouterResp) GetErrMsg() string {
	if x != nil {
		return x.ErrMsg
	}
	return ""
}

type CommonResp_Server struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string                 `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int32                  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Rpc  *CommonResp_Server_Rpc `protobuf:"bytes,3,opt,name=rpc,proto3" json:"rpc,omitempty"`
}

func (x *CommonResp_Server) Reset() {
	*x = CommonResp_Server{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gate_http_gate_http_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResp_Server) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResp_Server) ProtoMessage() {}

func (x *CommonResp_Server) ProtoReflect() protoreflect.Message {
	mi := &file_gate_http_gate_http_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResp_Server.ProtoReflect.Descriptor instead.
func (*CommonResp_Server) Descriptor() ([]byte, []int) {
	return file_gate_http_gate_http_proto_rawDescGZIP(), []int{0, 0}
}

func (x *CommonResp_Server) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CommonResp_Server) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *CommonResp_Server) GetRpc() *CommonResp_Server_Rpc {
	if x != nil {
		return x.Rpc
	}
	return nil
}

type CommonResp_Server_Rpc struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ip   string `protobuf:"bytes,1,opt,name=ip,proto3" json:"ip,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *CommonResp_Server_Rpc) Reset() {
	*x = CommonResp_Server_Rpc{}
	if protoimpl.UnsafeEnabled {
		mi := &file_gate_http_gate_http_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonResp_Server_Rpc) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonResp_Server_Rpc) ProtoMessage() {}

func (x *CommonResp_Server_Rpc) ProtoReflect() protoreflect.Message {
	mi := &file_gate_http_gate_http_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonResp_Server_Rpc.ProtoReflect.Descriptor instead.
func (*CommonResp_Server_Rpc) Descriptor() ([]byte, []int) {
	return file_gate_http_gate_http_proto_rawDescGZIP(), []int{0, 0, 0}
}

func (x *CommonResp_Server_Rpc) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *CommonResp_Server_Rpc) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

var File_gate_http_gate_http_proto protoreflect.FileDescriptor

var file_gate_http_gate_http_proto_rawDesc = []byte{
	0x0a, 0x19, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x2f, 0x67, 0x61, 0x74, 0x65,
	0x2e, 0x68, 0x74, 0x74, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x68, 0x74, 0x74,
	0x70, 0x67, 0x61, 0x74, 0x65, 0x22, 0x84, 0x02, 0x0a, 0x0a, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x67,
	0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x2e, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x70, 0x69, 0x64, 0x1a,
	0x8a, 0x01, 0x0a, 0x06, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f,
	0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x31,
	0x0a, 0x03, 0x72, 0x70, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x52, 0x70, 0x63, 0x52, 0x03, 0x72, 0x70,
	0x63, 0x1a, 0x29, 0x0a, 0x03, 0x52, 0x70, 0x63, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x1d, 0x0a, 0x09,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x22, 0xac, 0x01, 0x0a, 0x0a,
	0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x12, 0x28, 0x0a, 0x04, 0x72, 0x65,
	0x73, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x67,
	0x61, 0x74, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x52, 0x04,
	0x72, 0x65, 0x73, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4e, 0x75, 0x6d, 0x4f,
	0x66, 0x4c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4e, 0x75,
	0x6d, 0x4f, 0x66, 0x4c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x72, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x65, 0x72, 0x72, 0x4d, 0x73, 0x67, 0x32, 0x42, 0x0a, 0x08, 0x68, 0x74,
	0x74, 0x70, 0x47, 0x61, 0x74, 0x65, 0x12, 0x36, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x72, 0x12, 0x13, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x52,
	0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x67,
	0x61, 0x74, 0x65, 0x2e, 0x52, 0x6f, 0x75, 0x74, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x42, 0x26,
	0x5a, 0x24, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x65, 0x72, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x67, 0x61, 0x74, 0x65, 0x2e, 0x68, 0x74, 0x74, 0x70, 0x3b, 0x70, 0x62, 0x5f, 0x68, 0x74,
	0x74, 0x70, 0x67, 0x61, 0x74, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_gate_http_gate_http_proto_rawDescOnce sync.Once
	file_gate_http_gate_http_proto_rawDescData = file_gate_http_gate_http_proto_rawDesc
)

func file_gate_http_gate_http_proto_rawDescGZIP() []byte {
	file_gate_http_gate_http_proto_rawDescOnce.Do(func() {
		file_gate_http_gate_http_proto_rawDescData = protoimpl.X.CompressGZIP(file_gate_http_gate_http_proto_rawDescData)
	})
	return file_gate_http_gate_http_proto_rawDescData
}

var file_gate_http_gate_http_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_gate_http_gate_http_proto_goTypes = []interface{}{
	(*CommonResp)(nil),            // 0: httpgate.CommonResp
	(*RouterReq)(nil),             // 1: httpgate.RouterReq
	(*RouterResp)(nil),            // 2: httpgate.RouterResp
	(*CommonResp_Server)(nil),     // 3: httpgate.CommonResp.Server
	(*CommonResp_Server_Rpc)(nil), // 4: httpgate.CommonResp.Server.Rpc
}
var file_gate_http_gate_http_proto_depIdxs = []int32{
	3, // 0: httpgate.CommonResp.server:type_name -> httpgate.CommonResp.Server
	0, // 1: httpgate.RouterResp.resp:type_name -> httpgate.CommonResp
	4, // 2: httpgate.CommonResp.Server.rpc:type_name -> httpgate.CommonResp.Server.Rpc
	1, // 3: httpgate.httpGate.GetRouter:input_type -> httpgate.RouterReq
	2, // 4: httpgate.httpGate.GetRouter:output_type -> httpgate.RouterResp
	4, // [4:5] is the sub-list for method output_type
	3, // [3:4] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_gate_http_gate_http_proto_init() }
func file_gate_http_gate_http_proto_init() {
	if File_gate_http_gate_http_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_gate_http_gate_http_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gate_http_gate_http_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gate_http_gate_http_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RouterResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gate_http_gate_http_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResp_Server); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_gate_http_gate_http_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonResp_Server_Rpc); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_gate_http_gate_http_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_gate_http_gate_http_proto_goTypes,
		DependencyIndexes: file_gate_http_gate_http_proto_depIdxs,
		MessageInfos:      file_gate_http_gate_http_proto_msgTypes,
	}.Build()
	File_gate_http_gate_http_proto = out.File
	file_gate_http_gate_http_proto_rawDesc = nil
	file_gate_http_gate_http_proto_goTypes = nil
	file_gate_http_gate_http_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// HttpGateClient is the client API for HttpGate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type HttpGateClient interface {
	GetRouter(ctx context.Context, in *RouterReq, opts ...grpc.CallOption) (*RouterResp, error)
}

type httpGateClient struct {
	cc grpc.ClientConnInterface
}

func NewHttpGateClient(cc grpc.ClientConnInterface) HttpGateClient {
	return &httpGateClient{cc}
}

func (c *httpGateClient) GetRouter(ctx context.Context, in *RouterReq, opts ...grpc.CallOption) (*RouterResp, error) {
	out := new(RouterResp)
	err := c.cc.Invoke(ctx, "/httpgate.httpGate/GetRouter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HttpGateServer is the server API for HttpGate service.
type HttpGateServer interface {
	GetRouter(context.Context, *RouterReq) (*RouterResp, error)
}

// UnimplementedHttpGateServer can be embedded to have forward compatible implementations.
type UnimplementedHttpGateServer struct {
}

func (*UnimplementedHttpGateServer) GetRouter(context.Context, *RouterReq) (*RouterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRouter not implemented")
}

func RegisterHttpGateServer(s *grpc.Server, srv HttpGateServer) {
	s.RegisterService(&_HttpGate_serviceDesc, srv)
}

func _HttpGate_GetRouter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HttpGateServer).GetRouter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/httpgate.httpGate/GetRouter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HttpGateServer).GetRouter(ctx, req.(*RouterReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _HttpGate_serviceDesc = grpc.ServiceDesc{
	ServiceName: "httpgate.httpGate",
	HandlerType: (*HttpGateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRouter",
			Handler:    _HttpGate_GetRouter_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gate.http/gate.http.proto",
}
